diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index bdcf1e4..848f09d 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -14,6 +14,7 @@ i915-y := i915_drv.o i915_dma.o i915_irq.o \
 	  i915_gem_gtt.o \
 	  i915_gem_stolen.o \
 	  i915_gem_tiling.o \
+	  i915_gem_foreign.o \
 	  i915_gem_userptr.o \
 	  i915_sysfs.o \
 	  i915_trace_points.o \
diff --git a/drivers/gpu/drm/i915/i915_dma.c b/drivers/gpu/drm/i915/i915_dma.c
index 3453254..0f9acaf 100644
--- a/drivers/gpu/drm/i915/i915_dma.c
+++ b/drivers/gpu/drm/i915/i915_dma.c
@@ -1891,6 +1891,7 @@ struct drm_ioctl_desc i915_ioctls[] = {
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_CREATE, i915_gem_context_create_ioctl, DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_DESTROY, i915_gem_context_destroy_ioctl, DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_REG_READ, i915_reg_read_ioctl, DRM_UNLOCKED),
+	DRM_IOCTL_DEF_DRV(I915_GEM_FOREIGN, i915_gem_foreign_ioctl, DRM_UNLOCKED),
 	DRM_IOCTL_DEF_DRV(I915_GEM_USERPTR, i915_gem_userptr_ioctl, DRM_UNLOCKED),
 };
 
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 818f725..e5291cd 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1312,6 +1312,7 @@ struct drm_i915_gem_object {
 
 	struct sg_table *pages;
 	int pages_pin_count;
+	dma_addr_t *pfnlist;
 
 	/* prime dma-buf support */
 	void *dma_buf_vmapping;
@@ -1354,6 +1355,19 @@ struct drm_i915_gem_object {
 };
 #define to_gem_object(obj) (&((struct drm_i915_gem_object *)(obj))->base)
 
+struct i915_gem_foreign_object {
+	struct drm_i915_gem_object gem;
+	uint64_t gfn;
+	size_t size;
+	uint32_t domid;
+	bool balloon_pages;
+	struct vm_struct *vm;
+	struct page **pvec;
+	xen_pfn_t *mfn_list;
+
+	struct mm_struct *mm; // XXX REMOVE?
+};
+
 struct i915_gem_userptr_object {
 	struct drm_i915_gem_object gem;
 	uintptr_t user_ptr;
@@ -1370,6 +1384,7 @@ union drm_i915_gem_objects {
 	struct drm_i915_gem_object base;
 	union {
 		struct i915_gem_userptr_object userptr;
+		struct i915_gem_foreign_object foreign;
 	};
 };
 
@@ -1670,6 +1685,8 @@ int i915_gem_entervt_ioctl(struct drm_device *dev, void *data,
 			   struct drm_file *file_priv);
 int i915_gem_leavevt_ioctl(struct drm_device *dev, void *data,
 			   struct drm_file *file_priv);
+int i915_gem_foreign_ioctl(struct drm_device *dev, void *data,
+                           struct drm_file *file);
 int i915_gem_userptr_ioctl(struct drm_device *dev, void *data,
 			   struct drm_file *file);
 int i915_gem_set_tiling(struct drm_device *dev, void *data,
@@ -1688,6 +1705,9 @@ void i915_gem_object_init(struct drm_i915_gem_object *obj,
 			 const struct drm_i915_gem_object_ops *ops);
 struct drm_i915_gem_object *i915_gem_alloc_object(struct drm_device *dev,
 						  size_t size);
+void i915_gem_info_remove_obj(struct drm_i915_private *dev_priv,
+			      size_t size);
+
 void i915_gem_free_object(struct drm_gem_object *obj);
 
 int __must_check i915_gem_object_pin(struct drm_i915_gem_object *obj,
diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 7f99b1e..1c77e65 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -79,7 +79,7 @@ static void i915_gem_info_add_obj(struct drm_i915_private *dev_priv,
 	dev_priv->mm.object_memory += size;
 }
 
-static void i915_gem_info_remove_obj(struct drm_i915_private *dev_priv,
+void i915_gem_info_remove_obj(struct drm_i915_private *dev_priv,
 				     size_t size)
 {
 	dev_priv->mm.object_count--;
@@ -1360,7 +1360,7 @@ int i915_gem_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
 
 	offset = (unsigned long)vmf->virtual_address - vma->vm_start;
 	offset += obj->gtt_offset;
-	pfn = (dev_priv->mappable_base + offset) >> PAGE_SHIFT;
+	pfn = (dev_priv->gtt.mappable_base + offset) >> PAGE_SHIFT;
 
 	/* Finally, remap it using the new GTT offset */
 	ret = vm_insert_pfn(vma, (unsigned long)vmf->virtual_address, pfn);
@@ -3110,8 +3110,10 @@ i915_gem_object_bind_to_gtt(struct drm_i915_gem_object *obj,
 	}
 
 	ret = i915_gem_object_get_pages(obj);
-	if (ret)
+	if (ret) {
+		DRM_ERROR("i915_gem_object_get_pages failed");
 		return ret;
+	}
 
 	i915_gem_object_pin_pages(obj);
 
@@ -3145,6 +3147,7 @@ search_free:
 
 	ret = i915_gem_gtt_prepare_object(obj);
 	if (ret) {
+		DRM_ERROR("i915_gem_gtt_prepare_object failed\n");
 		i915_gem_object_unpin_pages(obj);
 		drm_mm_put_block(node);
 		return ret;
@@ -3459,8 +3462,10 @@ i915_gem_object_pin_to_display_plane(struct drm_i915_gem_object *obj,
 
 	if (pipelined != obj->ring) {
 		ret = i915_gem_object_sync(obj, pipelined);
-		if (ret)
+		if (ret) {
+			DRM_ERROR("i915_gem_object_sync failed\n");
 			return ret;
+		}
 	}
 
 	/* The display engine is not coherent with the LLC cache on gen6.  As
@@ -3472,17 +3477,23 @@ i915_gem_object_pin_to_display_plane(struct drm_i915_gem_object *obj,
 	 * of uncaching, which would allow us to flush all the LLC-cached data
 	 * with that bit in the PTE to main memory with just one PIPE_CONTROL.
 	 */
+#if 1
 	ret = i915_gem_object_set_cache_level(obj, I915_CACHE_NONE);
-	if (ret)
+	if (ret) {
+		DRM_ERROR("i915_gem_object_set_cache_level failed\n");
 		return ret;
+	}
+#endif
 
 	/* As the user may map the buffer once pinned in the display plane
 	 * (e.g. libkms for the bootup splash), we have to ensure that we
 	 * always use map_and_fenceable for all scanout buffers.
 	 */
 	ret = i915_gem_object_pin(obj, alignment, true, false);
-	if (ret)
+	if (ret) {
+		DRM_ERROR("i915_gem_object_pin failed\n");
 		return ret;
+	}
 
 	i915_gem_object_flush_cpu_write_domain(obj);
 
@@ -3654,8 +3665,10 @@ i915_gem_object_pin(struct drm_i915_gem_object *obj,
 		ret = i915_gem_object_bind_to_gtt(obj, alignment,
 						  map_and_fenceable,
 						  nonblocking);
-		if (ret)
+		if (ret) {
+			DRM_ERROR("i915_gem_object_bind_to_gtt failed\n");
 			return ret;
+		}
 
 		if (!dev_priv->mm.aliasing_ppgtt)
 			i915_gem_gtt_bind_object(obj, obj->cache_level);
diff --git a/drivers/gpu/drm/i915/i915_gem_foreign.c b/drivers/gpu/drm/i915/i915_gem_foreign.c
new file mode 100644
index 0000000..65094b7
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_gem_foreign.c
@@ -0,0 +1,325 @@
+/*
+ * Copyright Â© 2013 Citrix Systems, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ *
+ */
+
+#include "drmP.h"
+#include "i915_drm.h"
+#include "i915_drv.h"
+#include "i915_trace.h"
+#include "intel_drv.h"
+#include <linux/mmu_notifier.h>
+#include <linux/swap.h>
+#include <asm/xen/hypervisor.h>
+#include <asm/xen/hypercall.h>
+#include <xen/page.h>
+#include <xen/xen-ops.h>
+#include <xen/balloon.h>
+#include <xen/interface/memory.h>
+
+static struct i915_gem_foreign_object *to_foreign_object(struct drm_i915_gem_object *obj)
+{
+	return container_of(obj, struct i915_gem_foreign_object, gem);
+}
+
+static void
+i915_gem_foreign_release__mmu_notifier(struct i915_gem_foreign_object *vmap)
+{
+}
+
+static int
+i915_gem_foreign_init__mmu_notifier(struct i915_gem_foreign_object *vmap,
+				    unsigned flags)
+{
+	return 0;
+}
+
+static void
+i915_gem_foreign_release_mfns(struct i915_gem_foreign_object *vmap,
+                            int num_pages)
+{
+      xen_release_mfn_list_t xrml = {
+              .domid   = vmap->domid,
+              .nr_mfns = num_pages,
+      };
+
+      set_xen_guest_handle(xrml.mfn_list, vmap->mfn_list);
+
+      if (HYPERVISOR_memory_op(XENMEM_release_mfn_list, &xrml))
+              BUG();
+}
+
+static void
+i915_gem_foreign_free_pages(struct i915_gem_foreign_object *vmap,
+                            int num_pages)
+{
+      if (!vmap->balloon_pages) {
+              int i;
+              for (i = 0; i < num_pages; i++) {
+                      __free_page(vmap->pvec[i]);
+              }
+        } else {
+              free_xenballooned_pages(num_pages, vmap->pvec);
+        }
+}
+
+static void
+i915_gem_foreign_remove_override(struct i915_gem_foreign_object *vmap,
+                                 int num_pages)
+{
+      int i;
+
+      for (i = 0; i < num_pages; i++) {
+              if (m2p_remove_override(vmap->pvec[i], NULL))
+                      BUG();
+              if (!(i % 100)) {
+                      DRM_DEBUG_DRIVER("Foreign unmap(%d) pfn = %lx, kaddr = %p\n",
+                       i, page_to_pfn(vmap->pvec[i]),
+                       pfn_to_kaddr(page_to_pfn(vmap->pvec[i])));
+              }
+      }
+}
+
+static int
+i915_gem_foreign_get_pages(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+	int num_pages = obj->base.size >> PAGE_SHIFT;
+	struct sg_table *st = NULL;
+	struct scatterlist *sg = NULL;
+	int i, ret;
+	xen_pfn_t *pfn_list = NULL;
+	xen_translate_gpfn_list_t xtgl = {
+		.domid    = vmap->domid,
+		.nr_gpfns = num_pages,
+	};
+
+	if (vmap->mm == NULL) {
+		DRM_ERROR("vmap->mm is NULL\n");
+		return -EFAULT;
+	}
+
+        vmap->pvec = kmalloc(num_pages*sizeof(struct page *),
+                       GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY);
+        if (vmap->pvec == NULL) {
+                vmap->pvec = drm_malloc_ab(num_pages, sizeof(struct page *));
+                if (vmap->pvec == NULL)
+                        return -ENOMEM;
+        }
+
+
+	st = kmalloc(sizeof(*st), GFP_KERNEL);
+	if (st == NULL) {
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	if (sg_alloc_table(st, num_pages, GFP_KERNEL)) {
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	/* Translate the gpfns from the guest in question, get mfns */
+	pfn_list = kmalloc(sizeof(xen_pfn_t) * num_pages, GFP_KERNEL);
+	if (pfn_list == NULL) {
+		DRM_ERROR("Failed to alloc memory for pfn_list\n");
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	vmap->mfn_list = kmalloc(sizeof(xen_pfn_t) * num_pages, GFP_KERNEL);
+	if (vmap->mfn_list == NULL) {
+		DRM_ERROR("Failed to alloc memory for mfn_list\n");
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	for (i = 0; i < num_pages; i++) {
+		pfn_list[i] = ((unsigned long)(vmap->gfn + (PAGE_SIZE * i))) >> PAGE_SHIFT;
+	}
+	set_xen_guest_handle(xtgl.gpfn_list, pfn_list);
+	set_xen_guest_handle(xtgl.mfn_list, vmap->mfn_list);
+
+	ret = HYPERVISOR_memory_op(XENMEM_translate_gpfn_list, &xtgl);
+	if (ret) {
+		DRM_ERROR("XENMEM_translate_gpfn_list failed: %d\n", ret);
+		goto err0;
+	}
+
+	if (!vmap->balloon_pages) {
+		for (i = 0; i < num_pages; i++) {
+			vmap->pvec[i] = alloc_page(GFP_HIGHUSER);
+			if (!vmap->pvec[i]) {
+				i915_gem_foreign_free_pages(vmap, i - 1);
+				ret = -ENOMEM;
+				goto err1;
+			}
+		}
+	} else {
+		/* Using balloon allocated pages to override */
+		ret = alloc_xenballooned_pages(num_pages, vmap->pvec, false);
+		if (ret) {
+			DRM_ERROR("xen allocate balloon memory failed\n");
+			goto err1;
+		}
+	}
+
+	for (i = 0; i < num_pages; i++) {
+		ret = m2p_add_override(vmap->mfn_list[i], vmap->pvec[i], NULL);
+		if (ret) {
+			i915_gem_foreign_remove_override(vmap, i - 1);
+			goto err2;
+		}
+		if (!(i % 100)) {
+			DRM_DEBUG_DRIVER("Foreign map(%d) mfn = %lx, pfn = %lx, kaddr = %p, valid = %d\n",
+					 i, vmap->mfn_list[i], page_to_pfn(vmap->pvec[i]),
+					 pfn_to_kaddr(page_to_pfn(vmap->pvec[i])),
+					 virt_addr_valid(pfn_to_kaddr(page_to_pfn(vmap->pvec[i]))));
+		}
+	}
+
+	for_each_sg(st->sgl, sg, num_pages, i) {
+		if (!(i % 100)) {
+			DRM_DEBUG_DRIVER("Foreign page[%d] = %p\n",
+					 i, vmap->pvec[i]);
+		}
+		sg_set_page(sg, vmap->pvec[i], PAGE_SIZE, 0);
+	}
+	
+	obj->pages = st;
+	
+	/* Cleanup pfns, have to keep the mfns to untranslate later */
+	kfree(pfn_list);
+
+	return 0;
+
+err2:
+	/* Made it past the page allocations */
+	i915_gem_foreign_free_pages(vmap, num_pages);
+err1:
+	/* Made it past the translate hypercall */
+	i915_gem_foreign_release_mfns(vmap, num_pages);
+err0:
+	kfree(vmap->mfn_list);
+	kfree(pfn_list);
+
+	if (st) {
+		sg_free_table(st);
+		kfree(st);
+	}
+	drm_free_large(vmap->pvec);
+
+	return ret;
+}
+
+static void
+i915_gem_foreign_put_pages(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+	int num_pages = obj->base.size >> PAGE_SHIFT;
+
+	i915_gem_foreign_remove_override(vmap, num_pages);
+	i915_gem_foreign_free_pages(vmap, num_pages);
+	i915_gem_foreign_release_mfns(vmap, num_pages);
+
+	kfree(vmap->mfn_list);
+	sg_free_table(obj->pages);
+	kfree(obj->pages);
+	drm_free_large(vmap->pvec);
+}
+
+static void
+i915_gem_foreign_release(struct drm_i915_gem_object *obj)
+{
+	struct i915_gem_foreign_object *vmap = to_foreign_object(obj);
+
+	i915_gem_foreign_release__mmu_notifier(vmap);
+}
+
+static const struct drm_i915_gem_object_ops i915_gem_foreign_ops = {
+	.get_pages = i915_gem_foreign_get_pages,
+	.put_pages = i915_gem_foreign_put_pages,
+	.release = i915_gem_foreign_release,
+};
+
+/**
+ * Creates a new mm object that wraps some user memory.
+ */
+int
+i915_gem_foreign_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
+{
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct drm_i915_gem_foreign *args = data;
+	struct i915_gem_foreign_object *obj;
+	int num_pages;
+	int ret;
+	u32 handle;
+
+	num_pages = (args->size + PAGE_SIZE - 1) >> PAGE_SHIFT;
+	if (num_pages * PAGE_SIZE > dev_priv->gtt.total)
+		return -E2BIG;
+
+	/* Allocate the new object */
+	obj = kzalloc(sizeof(*obj), GFP_KERNEL);
+	if (obj == NULL)
+		return -ENOMEM;
+
+	if (drm_gem_private_object_init(dev, &obj->gem.base,
+					num_pages * PAGE_SIZE)) {
+		kfree(obj);
+		return -ENOMEM;
+	}
+
+	i915_gem_object_init(&obj->gem, &i915_gem_foreign_ops);
+	obj->gem.cache_level = I915_CACHE_LLC_MLC;
+
+	obj->gem.gtt_offset = 0;
+	obj->gfn = args->gfn;
+	obj->domid = args->domid;
+	obj->size = args->size;
+
+	if (args->flags & I915_FOREIGN_BALLOON_PAGES) {
+		obj->balloon_pages = 1;
+	} else {
+		if ((args->flags & I915_FOREIGN_ALLOC_PAGES) == 0)
+			DRM_INFO("No foreign page source specified, default to alloc pages\n");
+		obj->balloon_pages = 0;
+	}
+
+	/* And keep a pointer to the current->mm for resolving the user pages
+	 * at binding. This means that we need to hook into the mmu_notifier
+	 * in order to detect if the mmu is destroyed.
+	 */
+	obj->mm = current->mm;
+	ret = i915_gem_foreign_init__mmu_notifier(obj, 0);
+	if (ret)
+		return ret;
+
+	ret = drm_gem_handle_create(file, &obj->gem.base, &handle);
+	/* drop reference from allocate - handle holds it now */
+	drm_gem_object_unreference(&obj->gem.base);
+	if (ret)
+		return ret;
+
+	args->handle = handle;
+	return 0;
+}
diff --git a/drivers/gpu/drm/i915/i915_gem_userptr.c b/drivers/gpu/drm/i915/i915_gem_userptr.c
index 5e8e5db..685cbaf 100644
--- a/drivers/gpu/drm/i915/i915_gem_userptr.c
+++ b/drivers/gpu/drm/i915/i915_gem_userptr.c
@@ -30,6 +30,11 @@
 #include <linux/mmu_notifier.h>
 #include <linux/swap.h>
 
+static inline int vma_is_io(struct vm_area_struct *vma)
+{
+        return !!(vma->vm_flags & (VM_IO | VM_PFNMAP));
+}
+
 static struct i915_gem_userptr_object *to_userptr_object(struct drm_i915_gem_object *obj)
 {
 	return container_of(obj, struct i915_gem_userptr_object, gem);
@@ -143,6 +148,7 @@ i915_gem_userptr_get_pages(struct drm_i915_gem_object *obj)
 	struct scatterlist *sg;
 	struct page **pvec;
 	int n, pinned, ret;
+        struct vm_area_struct *vma = NULL;
 
 	if (vmap->mm == NULL)
 		return -EFAULT;
@@ -176,8 +182,30 @@ i915_gem_userptr_get_pages(struct drm_i915_gem_object *obj)
 			return -ENOMEM;
 	}
 
+        vma = find_vma(current->mm, vmap->user_ptr);
 	pinned = 0;
-	if (vmap->mm == current->mm)
+        /* the memory region mmaped with VM_PFNMAP. */
+        if (vma_is_io(vma)) {
+                unsigned int i;
+                unsigned long start = vmap->user_ptr;
+
+                for (i = 0; i < num_pages; i++, start += PAGE_SIZE) {
+                        unsigned long pfn;
+                        int ret = follow_pfn(vma, start, &pfn);
+                        if (ret)
+                                return ret;
+
+                        pvec[i] = pfn_to_page(pfn);
+                        pinned++;
+                }
+
+                if (pinned != num_pages) {
+                        DRM_ERROR("failed to get user_pages.\n");
+                        return -EINVAL;
+                }
+        }
+
+	if (!pinned && vmap->mm == current->mm)
 		pinned = __get_user_pages_fast(vmap->user_ptr, num_pages,
 					       !vmap->read_only, pvec);
 	if (pinned < num_pages) {
@@ -287,7 +315,7 @@ i915_gem_userptr_ioctl(struct drm_device *dev, void *data, struct drm_file *file
 	first_data_page = args->user_ptr / PAGE_SIZE;
 	last_data_page = (args->user_ptr + args->user_size - 1) / PAGE_SIZE;
 	num_pages = last_data_page - first_data_page + 1;
-	if (num_pages * PAGE_SIZE > dev_priv->mm.gtt_total)
+	if (num_pages * PAGE_SIZE > dev_priv->gtt.total)
 		return -E2BIG;
 
 	/* Allocate the new object */
diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index bedf15a..48688e0 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -1801,8 +1801,10 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
 
 	dev_priv->mm.interruptible = false;
 	ret = i915_gem_object_pin_to_display_plane(obj, alignment, pipelined);
-	if (ret)
+	if (ret) {
+                DRM_ERROR("pin_to_display_plane failed\n");
 		goto err_interruptible;
+        }
 
 	/* Install a fence for tiled scan-out. Pre-i965 always needs a
 	 * fence, whereas 965+ only requires a fence if using
@@ -1810,8 +1812,10 @@ intel_pin_and_fence_fb_obj(struct drm_device *dev,
 	 * a fence as the cost is not that onerous.
 	 */
 	ret = i915_gem_object_get_fence(obj);
-	if (ret)
+	if (ret){
+                DRM_ERROR("object_get_fence failed\n");
 		goto err_unpin;
+        }
 
 	i915_gem_object_pin_fence(obj);
 
@@ -2179,7 +2183,7 @@ intel_pipe_set_base(struct drm_crtc *crtc, int x, int y,
 					 NULL);
 	if (ret != 0) {
 		mutex_unlock(&dev->struct_mutex);
-		DRM_ERROR("pin & fence failed\n");
+		DRM_ERROR("pin & fence failed: %d\n", ret);
 		return ret;
 	}
 
diff --git a/drivers/xen/privcmd.c b/drivers/xen/privcmd.c
index 4dea491..8c9468a 100644
--- a/drivers/xen/privcmd.c
+++ b/drivers/xen/privcmd.c
@@ -36,6 +36,7 @@
 #include <xen/page.h>
 #include <xen/xen-ops.h>
 #include <xen/balloon.h>
+#include <xen/interface/memory.h>
 
 #include "privcmd.h"
 
@@ -192,6 +193,48 @@ static int mmap_mfn_range(void *data, void *state)
 	return 0;
 }
 
+
+static long privcmd_ioctl_add_to_physmap(void __user *udata)
+{
+	struct privcmd_atpu atpucmd;
+	struct mm_struct *mm = current->mm;
+	int ret = 0;
+	unsigned num_pages;
+	struct page **pages;
+	int i;
+
+	if (copy_from_user(&atpucmd, udata, sizeof(atpucmd)))
+		return -EFAULT;
+
+	num_pages = atpucmd.npages;
+	pages = kmalloc(sizeof(struct page *) * num_pages, GFP_KERNEL);
+	if (pages == NULL)
+		return -ENOMEM;
+
+	down_read(&mm->mmap_sem);
+	ret = get_user_pages(current, mm, atpucmd.addr,
+			     num_pages, 1, 1, pages, NULL);
+	up_read(&mm->mmap_sem);
+
+        pr_warn("Asked for %d user pages, got %d user pages\n",
+		num_pages, ret);
+
+	for (i = 0; i < num_pages; i++)
+	{
+		struct xen_add_to_physmap xatp;
+		xatp.domid = atpucmd.dom;
+		xatp.foreign_domid = atpucmd.foreign_dom;
+		xatp.idx = page_to_pfn(pages[i]);
+		xatp.gpfn = atpucmd.gfn + i;
+		xatp.space = atpucmd.space;
+
+		if (HYPERVISOR_memory_op(XENMEM_add_to_physmap, &xatp))
+			BUG();
+	}
+
+	return ret;
+}
+
 static long privcmd_ioctl_mmap(void __user *udata)
 {
 	struct privcmd_mmap mmapcmd;
@@ -247,7 +290,6 @@ out:
 
 	return rc;
 }
-
 struct mmap_batch_state {
 	domid_t domain;
 	unsigned long va;
@@ -684,6 +726,10 @@ static long privcmd_ioctl(struct file *file,
 		ret = privcmd_ioctl_mmap_cache_attr(udata);
 		break;
 
+	case IOCTL_PRIVCMD_ADD_TO_PHYSMAP:
+		ret = privcmd_ioctl_add_to_physmap(udata);
+		break;
+
 	default:
 		ret = -EINVAL;
 		break;
diff --git a/include/uapi/drm/i915_drm.h b/include/uapi/drm/i915_drm.h
index 489e892..5ed9edc 100644
--- a/include/uapi/drm/i915_drm.h
+++ b/include/uapi/drm/i915_drm.h
@@ -199,6 +199,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_I915_GEM_GET_CACHING	0x30
 #define DRM_I915_REG_READ		0x31
 #define DRM_I915_GEM_USERPTR		0x32
+#define DRM_I915_GEM_FOREIGN		0x34
 
 #define DRM_IOCTL_I915_INIT		DRM_IOW( DRM_COMMAND_BASE + DRM_I915_INIT, drm_i915_init_t)
 #define DRM_IOCTL_I915_FLUSH		DRM_IO ( DRM_COMMAND_BASE + DRM_I915_FLUSH)
@@ -248,6 +249,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_IOCTL_I915_GEM_CONTEXT_CREATE	DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_CREATE, struct drm_i915_gem_context_create)
 #define DRM_IOCTL_I915_GEM_CONTEXT_DESTROY	DRM_IOW (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_DESTROY, struct drm_i915_gem_context_destroy)
 #define DRM_IOCTL_I915_REG_READ			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_REG_READ, struct drm_i915_reg_read)
+#define DRM_IOCTL_I915_GEM_FOREIGN		DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_FOREIGN, struct drm_i915_gem_foreign)
 #define DRM_IOCTL_I915_GEM_USERPTR			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_USERPTR, struct drm_i915_gem_userptr)
 
 /* Allow drivers to submit batchbuffers directly to hardware, relying
@@ -984,6 +986,16 @@ struct drm_i915_reg_read {
 	__u64 val; /* Return value */
 };
 
+struct drm_i915_gem_foreign {
+	__u64 gfn;
+	__u32 size;
+	__u32 domid;
+#define I915_FOREIGN_BALLOON_PAGES 0x00000001
+#define I915_FOREIGN_ALLOC_PAGES   0x00000002
+	__u32 flags;
+	__u32 handle;
+};
+
 struct drm_i915_gem_userptr {
 	__u64 user_ptr;
 	__u32 user_size;
diff --git a/include/uapi/xen/privcmd.h b/include/uapi/xen/privcmd.h
index ab003d5..b13f732 100644
--- a/include/uapi/xen/privcmd.h
+++ b/include/uapi/xen/privcmd.h
@@ -93,6 +93,14 @@ struct privcmd_mmapcacheattr {
        int type;
 };
 
+struct privcmd_atpu {
+       domid_t dom;
+       domid_t foreign_dom;
+       __u32 space;
+       __u64 addr;
+       __u64 npages;
+       __u64 gfn;
+};
 
 /*
  * @cmd: IOCTL_PRIVCMD_HYPERCALL
@@ -117,7 +125,8 @@ struct privcmd_mmapcacheattr {
 	_IOC(_IOC_NONE, 'P', 4, sizeof(struct privcmd_mmapbatch_v2))
 #define IOCTL_PRIVCMD_MMAPCONSEC					\
 	_IOC(_IOC_NONE, 'P', 5, sizeof(struct privcmd_mmapconsec))
+#define IOCTL_PRIVCMD_ADD_TO_PHYSMAP \
+	_IOC(_IOC_NONE, 'P', 6, sizeof(struct privcmd_atpu))
 #define IOCTL_PRIVCMD_MMAPCACHEATTR                            \
        _IOC(_IOC_NONE, 'P', 200, sizeof(struct privcmd_mmapcacheattr))
-
 #endif /* __LINUX_PUBLIC_PRIVCMD_H__ */
diff --git a/include/xen/interface/memory.h b/include/xen/interface/memory.h
index 2ecfe4f..b42da4b 100644
--- a/include/xen/interface/memory.h
+++ b/include/xen/interface/memory.h
@@ -182,12 +182,33 @@ struct xen_add_to_physmap {
 
     /* GPFN where the source mapping page should appear. */
     xen_pfn_t gpfn;
+    domid_t foreign_domid; /* IFF gmfn_foreign */
 };
 DEFINE_GUEST_HANDLE_STRUCT(xen_add_to_physmap);
 
 /*** REMOVED ***/
 /*#define XENMEM_translate_gpfn_list  8*/
 
+#define XENMEM_translate_gpfn_list  29
+struct xen_translate_gpfn_list {
+    /* Which domain to translate for? */
+    domid_t domid;
+
+    /* Length of list. */
+    xen_ulong_t nr_gpfns;
+
+    /* List of GPFNs to translate. */
+    GUEST_HANDLE(xen_pfn_t) gpfn_list;
+
+    /*
+     * Output list to contain MFN translations. May be the same as the input
+     * list (in which case each input GPFN is overwritten with the output MFN).
+     */
+    GUEST_HANDLE(xen_pfn_t) mfn_list;
+};
+typedef struct xen_translate_gpfn_list xen_translate_gpfn_list_t;
+
+
 #define XENMEM_add_to_physmap_range 23
 struct xen_add_to_physmap_range {
     /* IN */
@@ -263,4 +284,21 @@ struct xen_remove_from_physmap {
 };
 DEFINE_GUEST_HANDLE_STRUCT(xen_remove_from_physmap);
 
+/*
+ * Decrement the ref count of a list of mfns (previously incremented with
+ * XENMEM_translate_gpfn_list).
+ */
+#define XENMEM_release_mfn_list  30
+struct xen_release_mfn_list {
+    /* Which domain to release for? */
+    domid_t domid;
+
+    /* Length of list. */
+    xen_ulong_t nr_mfns;
+
+    /* List of GPFNs to release. */
+    GUEST_HANDLE(xen_pfn_t) mfn_list;
+};
+typedef struct xen_release_mfn_list xen_release_mfn_list_t;
+
 #endif /* __XEN_PUBLIC_MEMORY_H__ */
diff --git a/mm/memory.c b/mm/memory.c
index 1bc3b10..50ab06d 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -1792,8 +1792,11 @@ long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
 
 		if (!vma ||
 		    (vma->vm_flags & (VM_IO | VM_PFNMAP)) ||
-		    !(vm_flags & vma->vm_flags))
-			return i ? : -EFAULT;
+		    !(vm_flags & vma->vm_flags)) {
+			if (vma->vm_flags != 0x40600f9) {
+			if (!i) printk("FAULT because flags were %x, not %x\n ", vma->vm_flags, vm_flags);
+			return i ? : -EFAULT; }
+		}
 
 		if (is_vm_hugetlb_page(vma)) {
 			i = follow_hugetlb_page(mm, vma, pages, vmas,
